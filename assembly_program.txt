
Ce fichier a été utilisé pour écrire les codes assembleurs qui seront executés sur l'ordinateur minecraft 

-----------------------------------------------------------------------------------------

PROGRAMME 1
but du programme :
faire 255 - 40 + 25 = 240


en assembleur :
LDI r1 255
LDI r2 40
SUB r1 r1 r2
LDI r2 25

ADD r1 r1 r2
HLT

converti en langage machine :
0100 0001 1111 1111
0100 0010 0010 1000
0100 0011 0001 1001
0001 0001 0001 0010

0000 0001 0001 0011
1111 0000 0000 0000

-----------------------------------------------------------------------------------------

PROGRAMME 2
but du programme : tester l'instruction jump if
r4 contient 1 si ca a marché, 0 out autre si ca n'a pas marché


en assembleur : 
LDI r1 10
LDI r2 10
ADD r3 r1 r2
JZ 6
SUB r3 r1 r2
JZ 8
LDI r4 0
HLT
LDI r4 1
HLT

langage machine :
line 0 : ['0100', '0001', '0000    1010']
line 1 : ['0100', '0010', '0000    1010']
line 2 : ['0000', '0011', '0001', '0010']
line 3 : ['0101    0000', '0000    0110']
line 4 : ['0001', '0011', '0001', '0010']
line 5 : ['0101    0000', '0000    1000']
line 6 : ['0100', '0100', '0000    0000']
line 7 : ['1111    0000    0000    0000']
line 8 : ['0100', '0100', '0000    0001']
line 9 : ['1111    0000    0000    0000']

-----------------------------------------------------------------------------------------

PROGRAMME 3
but du programme : faire 4 x 5 = 20
résultat dans le registre 5

en assembleur :
LDI r1 4		0	# uniquement ca a changer
LDI r2 5		1	# uniquement ca a changer
LDI r3 0		2
LDI r5 0		3
LDI r6 1		4
  ADD r5 r5 r2		5
  ADD r3 r3 r6		6
  SUB r15 r1 r3		7
  JZ 10			8
  JMP 5			9
HLT			10

en langage machine :
line 0 : ['0100', '0001', '0000    0110']
line 1 : ['0100', '0010', '0000    1001']
line 2 : ['0100', '0011', '0000    0000']
line 3 : ['0100', '0101', '0000    0000']
line 4 : ['0100', '0110', '0000    0001']
line 5 : ['0000', '0101', '0101', '0010']
line 6 : ['0000', '0011', '0011', '0110']
line 7 : ['0001', '1111', '0001', '0011']
line 8 : ['0101    0000', '0000    1010']
line 9 : ['0110    0000', '0000    0101']
line 10 : ['1111    0000    0000    0000']

-----------------------------------------------------------------------------------------

PROGRAMME 4
but du programme : tester l'incrementation de registre

en assembleur :
LDI r1 10
LDI r2 5
ADD r1 r1 r2
HLT

en langage machine :
line 0 : ['0100', '0001', '0000    1010']
line 1 : ['0100', '0010', '0000    0101']
line 2 : ['0000', '0001', '0001', '0010']
line 3 : ['1111    0000    0000    0000']


PROGRAMME 4
but du programme : afficher un smiley

en assembleur :
LDI r15 64

LDI r15 13
LDI r14 141	(13 + 128)

LDI r15 15
LDI r14 141 	(13 + 128)

LDI r15 12
LDI r14 139 	(11 + 128)

LDI r15 13
LDI r14 138 	(10 + 128)

LDI r15 14
LDI r14 138 	(10 + 128)

LDI r15 15
LDI r14 138 	(10 + 128)

LDI r15 16
LDI r14 139 	(11 + 128)
HLT

en langage machine :
line 0 : ['0100', '1111', '0100    0000']
line 1 : ['0100', '1111', '0000    1101']
line 2 : ['0100', '1110', '1000    1101']
line 3 : ['0100', '1111', '0000    1111']
line 4 : ['0100', '1110', '1000    1101']
line 5 : ['0100', '1111', '0000    1100']
line 6 : ['0100', '1110', '1000    1011']
line 7 : ['0100', '1111', '0000    1101']
line 8 : ['0100', '1110', '1000    1010']
line 9 : ['0100', '1111', '0000    1110']
line 10 : ['0100', '1110', '1000    1010']
line 11 : ['0100', '1111', '0000    1111']
line 12 : ['0100', '1110', '1000    1010']
line 13 : ['0100', '1111', '0001    0000']
line 14 : ['0100', '1110', '1000    1011']
line 15 : ['1111    0000    0000    0000']

-----------------------------------------------------------------------------------------

PROGRAMME GAUCHE-DROITE
but du programme : faire rebondir une balle sur l'écran de gauche à droite

en assembleur :

LDI r1 1	# l'acceleration de la balle écrit en complément à 2, 1 si elle avance, 255 si elle recule (voir bas de la page)
LDI r2 31	# bord droit de l'écran
LDI r3 63	# pour enlever les 2 bits de clear et plot du r15
LDI r6 192	# pour afficher la balle (mettre à 1 le bit de plot du r15)

# LIGNE 4 coordonnées d'origine de la balle, effacer l'écran au début et afficher la balle
LDI r15 0
LDI r14 0

LDI r15 93	# 29 + 64	X = 93
LDI r14 133	# 5 + 128	Y = 5


# LIGNE 8 update la balle
AND r15 r3 r15	# on met à 0 les 2 bits de clear et plot
ADD r15 r1 r15	# on avance/recule la balle

# LIGNE 10 afficher la balle
ADD r15 r6 r15

# LIGNE 11 vérifier si on est à un bord
# bord gauche
AND r15 r3 r15	# on met à 0 les 2 bits de clear et plot
SUB r0 r0 r15
JZ 17	# addr mettre r1 à 1

# bord droit
SUB r0 r2 r15
JZ 19	# addr mettre r1 à 255

# ni a gauche ni à droite
JMP 8	# addr update la balle

# LIGNE 17 mettre r1 à 1
LDI r1 1
JMP 8	# addr update la balle

# LIGNE 19 mettre r1 à 255
LDI r1 255
JMP 8	# addr update la balle



en langage machine :
line 0 : ['0100', '0001', '0000    0001'] 
line 1 : ['0100', '0010', '0001    1111'] 
line 2 : ['0100', '0011', '0011    1111'] 
line 3 : ['0100', '0110', '1100    0000'] 
line 4 : ['0100', '1111', '0000    0000'] 
line 5 : ['0100', '1110', '0000    0000'] 
line 6 : ['0100', '1111', '0101    1101'] 
line 7 : ['0100', '1110', '1000    0101'] 
line 8 : ['0011', '1111', '0011', '1111'] 
line 9 : ['0000', '1111', '0001', '1111'] 
line 10 : ['0000', '1111', '0110', '1111']
line 11 : ['0011', '1111', '0011', '1111']
line 12 : ['0001', '0000', '0000', '1111']
line 13 : ['0101    0000', '0001    0001']
line 14 : ['0001', '0000', '0010', '1111']
line 15 : ['0101    0000', '0001    0011']
line 16 : ['0110    0000', '0000    1000']
line 17 : ['0100', '0001', '0000    0001']
line 18 : ['0110    0000', '0000    1000']
line 19 : ['0100', '0001', '1111    1111']
line 20 : ['0110    0000', '0000    1000']

-----------------------------------------------------------------------------------------

PROGRAMME GAUCHE-DROITE-BAS-HAUT
but du programme : faire rebondir une balle sur l'écran de gauche à droite et de haut en bas (de la même manière que le logo DVD)

en assembleur :

# TODO

en langage machine :

# TODO

-----------------------------------------------------------------------------------------

trouvons par combien on doit augmenter les coordonnées x d'un pixel pour le reculer d'un pixel
x est stocké sur un octet (donc mod 256)

x est un entier naturel <= 255
x est la coordonnée en abscisse
y est la valeur à ajouter à x pour réduire x de 1

trouvons y tq : x + y = x - 1 [256]
	x + 255 = x + 255 [256]
	<=> x + 255 = x - 1[256] (on soustrait par 256)
y = 255 est une solution

Donc soustraire un nombre binaire et additionner le complément à 2 de ce nombre reviennent au même
1 = 255 en complément à 2 sur 8 bits
càd : x + 255 = x - 1	(x étant un nombre binaire écrit sur 8 bits)